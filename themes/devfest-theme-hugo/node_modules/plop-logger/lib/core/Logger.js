"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LoggerLevel_1 = require("./LoggerLevel");
const LoggerConfig_1 = require("./LoggerConfig");
class Logger {
    // Constructor
    constructor(name, level) {
        this.name = name;
        this.level = level;
    }
    static findLevel(name, defaultLevel) {
        const names = name.split(".");
        const aux = (idx, acc) => {
            if (idx > names.length) {
                return acc;
            }
            const slice = names.slice(0, idx);
            const currentName = slice.join(".");
            const maybeLevel = LoggerLevel_1.logLevel(Logger.config.levels[currentName]);
            return aux(idx + 1, maybeLevel == null ? acc : maybeLevel);
        };
        return aux(1, defaultLevel);
    }
    /**
     * Get or create a logger
     * @param name the logger name
     */
    static getLogger(name) {
        const result = Logger.loggers.get(name);
        if (result) {
            return result;
        }
        const level = Logger.findLevel(name, Logger.config.defaultLevel);
        const newLogger = new Logger(name, level);
        Logger.loggers.set(name, newLogger);
        return newLogger;
    }
    /**
     * Dump an object
     */
    dump(obj) {
        Logger.config.appender.dump(obj);
    }
    /**
     * Log a trace message
     * @param message the message
     * @param arg eventually an argument
     */
    trace(message, arg) {
        this.log(LoggerLevel_1.LogLevel.Trace, message, arg);
    }
    /**
     * Log a debug message
     * @param message the message
     * @param arg eventually an argument
     */
    debug(message, arg) {
        this.log(LoggerLevel_1.LogLevel.Debug, message, arg);
    }
    /**
     * Log an info message
     * @param message the message
     * @param arg eventually an argument
     */
    info(message, arg) {
        this.log(LoggerLevel_1.LogLevel.Info, message, arg);
    }
    /**
     * Log a warn message
     * @param message the message
     * @param arg eventually an argument
     */
    warn(message, arg) {
        this.log(LoggerLevel_1.LogLevel.Warn, message, arg);
    }
    /**
     * Log an error message
     * @param message the message
     * @param arg eventually an argument
     */
    error(message, arg) {
        this.log(LoggerLevel_1.LogLevel.Error, message, arg);
    }
    log(level, message, arg) {
        if (this.level <= level) {
            const entry = {
                level,
                now: new Date(),
                name: this.name,
                message: typeof message === "function" ? message() : `${message}`,
                arg
            };
            Logger.config.appender.log(entry);
        }
    }
}
exports.Logger = Logger;
/** The logger configuration */
Logger.config = LoggerConfig_1.defaultConfig;
Logger.loggers = new Map();
