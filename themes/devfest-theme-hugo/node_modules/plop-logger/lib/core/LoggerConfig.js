"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LoggerLevel_1 = require("./LoggerLevel");
class ConsoleAppender {
    constructor(console) {
        this.console = console;
    }
    // Format
    formatLevel(level) {
        return LoggerLevel_1.LogLevel[level];
    }
    formatDate(now) {
        return now.toLocaleTimeString();
    }
    formatName(name) {
        return name;
    }
    formatMessage(message) {
        return message;
    }
    formatArg(arg) {
        return "" + arg;
    }
    formatDump(obj) {
        return ["dump", JSON.stringify(obj, null, 2)];
    }
    log(entry) {
        const formatted = [
            this.formatLevel(entry.level),
            this.formatDate(entry.now),
            this.formatName(entry.name),
            "-",
            this.formatMessage(entry.message)
        ];
        if (typeof entry.arg !== "undefined") {
            formatted.push(this.formatArg(entry.arg));
        }
        const logFunction = ConsoleAppender.levelToLogFunction(entry.level, this.console);
        logFunction(...formatted);
    }
    dump(obj) {
        const formatted = this.formatDump(obj);
        this.console.log(...formatted);
    }
    static levelToLogFunction(level, appender) {
        switch (level) {
            case LoggerLevel_1.LogLevel.Trace:
                return appender.trace;
            case LoggerLevel_1.LogLevel.Debug:
                return appender.debug;
            case LoggerLevel_1.LogLevel.Info:
                return appender.info;
            case LoggerLevel_1.LogLevel.Warn:
                return appender.warn;
            case LoggerLevel_1.LogLevel.Error:
                return appender.error;
            default:
                return appender.log;
        }
    }
}
exports.ConsoleAppender = ConsoleAppender;
/**
 * The default configuration
 */
exports.defaultConfig = {
    appender: new ConsoleAppender(global.console),
    defaultLevel: LoggerLevel_1.LogLevel.Info,
    levels: {}
};
