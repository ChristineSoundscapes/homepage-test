"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ansi_colors_1 = tslib_1.__importDefault(require("ansi-colors"));
const LoggerConfig_1 = require("../core/LoggerConfig");
const LoggerLevel_1 = require("../core/LoggerLevel");
class NodeColorAppender extends LoggerConfig_1.ConsoleAppender {
    constructor(console) {
        super(console);
    }
    formatLevel(level) {
        switch (level) {
            case LoggerLevel_1.LogLevel.Trace:
                return ansi_colors_1.default.whiteBright("TRACE");
            case LoggerLevel_1.LogLevel.Debug:
                return ansi_colors_1.default.greenBright("DEBUG");
            case LoggerLevel_1.LogLevel.Info:
                return ansi_colors_1.default.cyan("INFO ");
            case LoggerLevel_1.LogLevel.Warn:
                return ansi_colors_1.default.yellow("WARN ");
            case LoggerLevel_1.LogLevel.Error:
                return ansi_colors_1.default.bgRed.gray.bold("ERROR");
            default:
                return LoggerLevel_1.LogLevel[level];
        }
    }
    formatDate(now) {
        return [
            now
                .getMinutes()
                .toString()
                .padStart(2, "0"),
            ":",
            now
                .getSeconds()
                .toString()
                .padStart(2, "0"),
            ".",
            now
                .getMilliseconds()
                .toString()
                .padStart(3, "0")
        ].join("");
    }
    formatName(name) {
        return ansi_colors_1.default.magenta(name);
    }
    formatArg(arg) {
        if (arg === null)
            return "<null>";
        let value;
        if (typeof arg === "function") {
            value = arg.apply(null);
        }
        else if (typeof arg === "object") {
            try {
                value = JSON.stringify(arg);
            }
            catch (e) {
                value = arg.toString();
            }
        }
        else {
            value = `${arg}`;
        }
        return ansi_colors_1.default.cyan(value);
    }
    formatDump(obj) {
        let value;
        try {
            value = JSON.stringify(obj, null, 2);
        }
        catch (e) {
            value = obj.toString();
        }
        return [ansi_colors_1.default.symbols.pointer, ansi_colors_1.default.dim.whiteBright(value)];
    }
}
exports.NodeColorAppender = NodeColorAppender;
exports.colorConfig = Object.assign(Object.assign({}, LoggerConfig_1.defaultConfig), { appender: new NodeColorAppender(global.console) });
